(self.webpackChunkexamples=self.webpackChunkexamples||[]).push([["core_README_md"],{7976:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useFormListName=t.useFormListContext=t.FormListProvider=t.FormListContext=t.useCommonAttributesContext=t.CommonAttributesProvider=t.CommonAttributesContext=t.useMultipleFormContext=t.MultipleFormProvider=t.MultipleFormContext=t.useRegisterWatch=t.useRegister=t.useFormContext=t.FormProvider=t.FormContext=void 0;let r=n("35685"),a=n("73156"),o=n("37672"),i=n("46040");r.__exportStar(n("42542"),t),r.__exportStar(n("63343"),t),r.__exportStar(n("73393"),t),r.__exportStar(n("36230"),t),r.__exportStar(n("37627"),t),t.FormContext=(0,o.create_CSTU_InstanceContext)(new i.FormInstance().instance_function),t.FormProvider=(0,o.create_CSTU_InstanceProvider)(i.useForm,t.FormContext),t.useFormContext=(0,o.create_CSTU_hooks_InstanceContext)(t.FormContext),t.useRegister=(0,o.create_CSTU_hooks_InstanceItemRegister)(t.FormContext,"register"),t.useRegisterWatch=(0,o.create_CSTU_hooks_InstanceFieldWatch)("registerWatch"),t.MultipleFormContext=(0,o.create_CSTU_InstanceContext)(new i.MultipleFormInstance),t.MultipleFormProvider=(0,o.create_CSTU_InstanceProvider)(i.useMultipleForm,t.MultipleFormContext),t.useMultipleFormContext=(0,o.create_CSTU_hooks_InstanceContext)(t.MultipleFormContext),t.CommonAttributesContext=(0,o.create_CSTU_InstanceContext)({labelMode:"left",columnNumber:4});t.CommonAttributesProvider=e=>{let{children:n,value:r}=e;return(0,a.createElement)(t.CommonAttributesContext.Provider,{value:r,children:n})};t.useCommonAttributesContext=()=>(0,a.useContext)(t.CommonAttributesContext),t.FormListContext=(0,o.create_CSTU_InstanceContext)({name:[]});t.FormListProvider=e=>{let{children:n,value:r}=e;return(0,a.createElement)(t.FormListContext.Provider,{value:r,children:n})};t.useFormListContext=()=>(0,a.useContext)(t.FormListContext);t.useFormListName=e=>{let{name:n}=(0,t.useFormListContext)(),r=(0,a.useMemo)(()=>(0,o.CSTU_toArray)(n).concat((0,o.CSTU_toArray)(e)),[e,n]);return[r,(0,o.CSTU_getFormatPath)(r)]}},42542:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useFormProps=void 0;let r=n("73156"),a=n("46040"),o=n("7976");t.useFormProps=e=>{let{columnNumber:t=4,children:n,form:i,name:s,onFinish:l,onValuesChange:u,onFinishFailed:m,initialValues:c,initialHideValues:p,labelMode:d,className:h,style:f}=e,[b]=(0,a.useForm)(i),g=(0,o.useMultipleFormContext)();(0,r.useMemo)(()=>{b.init(c,p)},[]),b.setCallbacks({onFinish:l,onValuesChange:u,onFinishFailed:m}),(0,r.useEffect)(()=>{let e=g.register(s,b);return()=>e()},[s]);let F=async e=>{e?.preventDefault?.(),e?.stopPropagation?.(),b.submit()};return{...e,onSubmit:F,columnNumber:t,children:n,labelMode:d,className:h,style:f,formInstance:b,multipleForm:g,content:(e=n)=>(0,r.createElement)(o.FormProvider,{instance:b,children:(0,r.createElement)(o.CommonAttributesProvider,{value:{labelMode:d,columnNumber:t},children:e})})}}},63343:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useIsHide=void 0;let r=n("73156"),a=n("37672"),o=n("7976");t.useIsHide=e=>{let[t,n]=(0,o.useFormListName)(e),i=(0,o.useFormContext)(),s=i.getHideValue(t),l=(0,a.use_CSTU_Update)();return(0,r.useEffect)(()=>{let e=()=>void 0;return t&&(e=i.registerHide({path:t,update:l.current,preserve:!1})),()=>e()},[n]),s}},73393:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useItemErrors=void 0;let r=n("73156"),a=n("37672"),o=n("7976");t.useItemErrors=e=>{let{rules:t}=e,n=(0,o.useFormContext)(),i=t.current.messages;return t.current.updateFormItemError=(0,a.use_CSTU_Update)().current,(0,r.useEffect)(()=>{let e=n.registerValidator(t.current);return()=>e()},[]),i}},36230:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useItemProps=void 0;let r=n("73156"),a=n("37672"),o=n("67503"),i=n("7976"),s=n("48187");t.useItemProps=e=>{let{labelMode:t="left"}=(0,i.useCommonAttributesContext)(),{name:n,required:l,label:u,children:m,trigger:c="onChange",labelMode:p=t,style:d,className:h,rules:f,valuePropName:b="value",getValueFromEvent:g,getAttrProps:F=()=>({}),noStyle:_,isDynamicsRules:v=!1,symbolId:y="carefrees-form-item-register"}=e,[P,C]=(0,i.useFormListName)(n),I=(0,r.useRef)(Symbol(y)),x=(0,o.useRandomId)(`${C}`),S=(0,i.useRegister)({path:P,uid:I.current}),T=S.getValue(P),V=F?.(T,S),L=(0,r.useRef)(new s.Rule({name:P,rules:f,instance:S}));L.current.updateFormItem=(0,a.use_CSTU_Update)().current,!v&&(L.current.rules=f);let M=e=>{let t=e;"function"==typeof g?t=g(e):e&&e.target&&"object"==typeof e.target&&b in e.target&&(t=e.target[b]),S.updateValue(P,t)},E=(0,r.isValidElement)(m)&&r.Children.map(m,e=>(0,r.isValidElement)(e)?(0,r.cloneElement)(e,{...V,[c]:M,id:x,name:P,[b]:T}):e);return{uid:x,content:E,rules:L,required:l,label:u,labelMode:p,style:d,className:h,noStyle:_}}},37627:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useListProps=void 0;let r=n("73156"),a=n("7976"),o=n("7976"),i=n("46040");t.useListProps=e=>{let{name:t,children:n,symbolId:s="carefrees-form-list-register"}=e,[l]=(0,o.useFormListName)(t),u=(0,r.useRef)(Symbol(s)),m=(0,o.useRegister)({path:l,uid:u.current}),c=(0,r.useRef)(new i.List).current;return(0,r.useMemo)(()=>{c.init(l,m)},[l]),(0,r.createElement)(a.FormListProvider,{value:{name:l},children:n?.({fields:c.getFields(),onAdd:c.onAdd,onDelete:c.onDelete},c)})}},98922:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});let r=n("35685");r.__exportStar(n("7976"),t),r.__exportStar(n("5745"),t),r.__exportStar(n("46040"),t),r.__exportStar(n("67503"),t)},35853:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8996:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},99320:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5745:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});let r=n("35685");r.__exportStar(n("16716"),t),r.__exportStar(n("99320"),t),r.__exportStar(n("8996"),t),r.__exportStar(n("35853"),t)},16716:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},46040:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});let r=n("35685");r.__exportStar(n("17177"),t),r.__exportStar(n("98637"),t),r.__exportStar(n("48187"),t),r.__exportStar(n("9698"),t)},9698:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.List=void 0;t.List=class e{instance;keys=[];id=0;name;init=(e,t)=>{this.name=e,this.instance=t};getLastValue=()=>{let e=this.instance?.getValue?.(this.name),t=Array.isArray(e)?e:[];return t};onAdd=(e={})=>{let t=this.getLastValue(),n=[...t,e||{}];this.keys=[...this.keys,this.id],this.id++,this.instance.updateValue(this.name,n)};onDelete=e=>{let t=this.getLastValue(),n=new Set(Array.isArray(e)?e:[e]);this.keys=this.keys.filter((e,t)=>!n.has(t));let r=t.filter((e,t)=>!n.has(t));this.instance.updateValue(this.name,r)};getFields=()=>{let e=this.getLastValue();return e.map((e,t)=>{let n=this.keys[t];return void 0===n&&(this.keys[t]=this.id,n=this.keys[t],this.id++),{name:t,key:n}})}}},98637:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useMultipleForm=t.MultipleFormInstance=void 0;let r=n("73156"),a=n("37672");class o{instanceMap=new Map([]);register=(e,t)=>(this.instanceMap.set(e,t),()=>{this.instanceMap.delete(e)});getFormInstances=e=>e?this.instanceMap.get(e):this.instanceMap;validate=async e=>{let t={},n=!0;if(e){let r=this.instanceMap.get(e);if(r)try{let n=await r.validate();t[e]={errorFields:[],values:n}}catch(r){n=!1,t[e]=r}}else{let e=Array.from(this.instanceMap.keys()),r=e.length;for(let a=0;a<r;a++){let r=e[a],o=this.instanceMap.get(r);try{let e=await o.validate();t[r]={errorFields:[],values:e}}catch(e){n=!1,t[r]=e}}}return n?Promise.resolve(t):Promise.reject(t)};getValues=(e,t)=>{if(!e){let e={};return this.instanceMap.forEach((t,n)=>{e[n]=t.getValue()}),e}let n=this.instanceMap.get(e);if(n)return{[e]:n.getValue(t)};let r=(0,a.CSTU_cloneByNamePathList)({},(0,a.CSTU_toArray)(t));return{[e]:r}}}t.MultipleFormInstance=o;t.useMultipleForm=function(e){let t=(0,r.useRef)(null);return!t.current&&(e?t.current=e:t.current=new o),[t.current]}},48187:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rule=void 0;let r=n("35685"),a=r.__importDefault(n("83662")),o=n("37672");t.Rule=class e{instance;name=void 0;rules=[];messages=[];updateFormItem;updateFormItemError;constructor(e){let{name:t,rules:n,instance:r}=e;this.name=t,this.rules=n,this.instance=r}updateMessages=e=>{this.messages=e||[],this.updateFormItemError?.({})};updateRules=(e,t)=>{this.rules=e,this.messages=t||[],this.updateFormItem?.({})};validator=()=>new Promise((e,t)=>{let n=this.instance.getValue(this.name),r=(0,o.CSTU_getFormatPath)(this.name),i=new a.default({[r]:this.rules||[]});i.validate({[r]:n}).then(t=>{e(t),this.updateMessages()}).catch(({errors:e})=>{if(Array.isArray(e)){let n=e.map(e=>e.message);this.updateMessages(n),t(n)}else t()})})}},17177:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useForm=t.FormInstance=void 0;let r=n("73156"),a=n("37672");class o extends a.CSTU_Instance{storeField="store";initialField="initialValues";componentField="componentList";watchField="watchList";store={};initialValues={};componentList=[];watchList=[];validatorList=[];hideList=[];hideStore={};hideInitialValues={};hideStoreField="hideStore";hideInitialField="hideInitialValues";hideComponentField="hideList";callbacks={};init=(e,t)=>{this._create_CSTU_init(this.storeField,this.initialField,e),this._create_CSTU_init(this.hideStoreField,this.hideInitialField,t)};register=e=>this._create_CSTU_register(this.componentField,this.storeField,this.initialField,e);registerWatch=e=>this._create_CSTU_registerWatch(this.watchField,e);registerValidator=e=>(this.validatorList.push(e),()=>{this.validatorList=this.validatorList.filter(t=>t!==e)});updateValidatorRules=(e,t,n)=>{let r=this.validatorList.filter(t=>(0,a.CSTU_getFormatPath)(t.name)===(0,a.CSTU_getFormatPath)(e));r&&r.length&&r.forEach(e=>{e.updateRules(t,n)})};updateValidatorMessage=(e,t)=>{let n=this.validatorList.filter(t=>(0,a.CSTU_getFormatPath)(t.name)===(0,a.CSTU_getFormatPath)(e));n&&n.length&&n.forEach(e=>{e.updateMessages(t)})};registerHide=e=>(e.preserve=!1,this._create_CSTU_register(this.hideComponentField,this.hideStoreField,this.hideInitialField,e));updateHideValue=(e,t)=>{this._create_CSTU_updateValue(this.hideComponentField,this.hideStoreField,void 0,e,t,!0)};getHideValue=e=>this._create_CSTU_getValue(this.hideStoreField,e);updateValue=(e,t)=>{this._create_CSTU_updateValue(this.componentField,this.storeField,this.watchField,e,t,!0);let n=(0,a.CSTU_cloneByNamePathList)(this.getValue(),[e]);this.callbacks.onValuesChange?.(n,this.getValue()),this.validateOne(e)};bathUpdateValue=(e,t)=>{this._create_CSTU_bathUpdateValue(this.componentField,this.storeField,this.watchField,e,t);let n=(0,a.CSTU_cloneByNamePathList)(this.getValue(),Object.keys(e));this.callbacks.onValuesChange?.(n,this.getValue())};notice=(e=!0)=>{this._create_CSTU_bathNotice(this.componentField,e)};getValue=e=>this._create_CSTU_getValue(this.storeField,e);validateOne=async e=>{try{await this.validate([e])}catch(e){}};validate=async e=>new Promise(async(t,n)=>{let r=[],o=[],i=this.componentList.map(e=>(0,a.CSTU_toArray)(e.path)),s=this.validatorList.length;for(let t=0;t<s;t++){let n=this.validatorList[t],i=(0,a.CSTU_toArray)(n.name),s=!0;if(Array.isArray(e)){let t=e.find(e=>(0,a.CSTU_getFormatPath)(e)===(0,a.CSTU_getFormatPath)(n.name));!t&&(s=!1)}try{s&&(await n.validator(),o.push({errors:[],name:i}))}catch(e){e&&r.push({errors:e,name:i})}}let l=(0,a.CSTU_cloneByNamePathList)(this.getValue(),i);r.length?n({errorFields:r,values:l}):t(l)});submit=async()=>{try{let e=await this.validate();e&&this.callbacks?.onFinish?.(e)}catch(e){this.callbacks.onFinishFailed?.(e)}};setCallbacks=e=>{this.callbacks=e};getStateData=()=>({store:this.store,initialValues:this.initialValues,componentList:this.componentList,watchList:this.watchList,validatorList:this.validatorList,hideList:this.hideList,hideStore:this.hideStore,hideInitialValues:this.hideInitialValues});get instance_function(){return{init:this.init,register:this.register,registerWatch:this.registerWatch,updateValue:this.updateValue,bathUpdateValue:this.bathUpdateValue,notice:this.notice,getValue:this.getValue,validate:this.validate,submit:this.submit,setCallbacks:this.setCallbacks,registerValidator:this.registerValidator,registerHide:this.registerHide,updateHideValue:this.updateHideValue,getHideValue:this.getHideValue,updateValidatorRules:this.updateValidatorRules,updateValidatorMessage:this.updateValidatorMessage,__stateData:this.getStateData()}}}t.FormInstance=o;t.useForm=function(e){let t=(0,r.useRef)(null);return!t.current&&(e?t.current=e:t.current=new o().instance_function),[t.current]}},67503:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useRandomId=t.randomString=void 0;let r=n("73156");t.randomString=function(e,t="",n=32){let r=e.replace(/:/g,"_"),a="ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678",o=a.length,i="";for(let e=0;e<n;e++)i+=a.charAt(Math.floor(Math.random()*o));return[i,r,t].join("_")};t.useRandomId=(e,t="carefrees")=>{let n=(0,r.useId)();return(0,r.useMemo)(()=>{let r=n.replace(/:/g,"_");return[t,r,e].join("")},[n,e])}},11771:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var r={components:{55:function(){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"FormList",{enumerable:!0,get:function(){return l}});let e=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=a(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var s=o?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(r,i,s):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}(n("73156")),r=n("98922");function a(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(a=function(e){return e?n:t})(e)}let o=t=>{let{content:n,children:a,onSubmit:o,...i}=(0,r.useFormProps)(t);return console.log("Form====>",i),n(e.default.createElement("form",{onSubmit:o},a))},i=t=>{let n=(0,r.useItemErrors)(t);return console.log("错误信息====>",n),Array.isArray(n)&&!!n.length&&e.default.createElement("div",{style:{color:"red",boxSizing:"border-box"}},n)||e.default.createElement(e.Fragment,null)},s=t=>{let{content:n,rules:a,label:o,...s}=(0,r.useItemProps)(t);return console.log("Item====>",s),e.default.createElement("div",null,e.default.createElement("div",null,e.default.createElement("span",null,o)," ",n," "),e.default.createElement(i,{rules:a}))},l=t=>{let{className:n,style:a}=t,o=(0,r.useListProps)(t);return e.default.createElement("div",{style:a},o)};return()=>{let[t]=(0,r.useForm)();return e.default.createElement(o,{onFinish:(...e)=>{console.log("提交打印===>",e)},form:t,initialValues:{点对点1:"1"}},e.default.createElement(s,{rules:[{required:!0,message:"必填项"}],labelMode:"left",label:"成都洒出1",required:!0,name:"点对点1"},e.default.createElement("input",null)),e.default.createElement(s,{rules:[{required:!0,message:"必填项"}],labelMode:"left",label:"成都洒出2",required:!0,name:"点对点2"},e.default.createElement("input",null)),e.default.createElement(l,{name:"aaa"},({fields:t,onAdd:n,onDelete:r})=>e.default.createElement("div",{style:{border:"1px solid red",padding:5,boxSizing:"border-box"}},t.map(t=>e.default.createElement("div",{style:{border:"1px solid green",marginBottom:5,padding:5,boxSizing:"border-box"},key:t.key},e.default.createElement("button",{type:"button",onClick:()=>r(t.name)},"删除"),e.default.createElement(s,{label:`标题${t.key}`,name:[t.name,"a"]},e.default.createElement("input",{style:{width:"100%",boxSizing:"border-box"}})))),e.default.createElement("br",null),e.default.createElement("button",{type:"button",onClick:()=>n({})},"添加"))),e.default.createElement("button",{type:"submit"},"提交"))}}()},data:{55:{name:55,meta:{},code:'"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});Object.defineProperty(__webpack_exports__,"FormList",{enumerable:true,get:function(){return FormList}});const _react=_interop_require_wildcard(require("react"));const _simpleformutils=require("@carefrees/simple-form-utils");function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interop_require_wildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={__proto__:null};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}const Form=props=>{const{content,children,onSubmit,...rest}=(0,_simpleformutils.useFormProps)(props);console.log("Form====>",rest);return content(_react.default.createElement("form",{onSubmit:onSubmit},children))};const FormItemError=props=>{const error=(0,_simpleformutils.useItemErrors)(props);console.log("错误信息====>",error);return Array.isArray(error)&&!!error.length&&_react.default.createElement("div",{style:{color:"red",boxSizing:"border-box"}},error)||_react.default.createElement(_react.Fragment,null)};const Item=props=>{const{content,rules,label,...rest}=(0,_simpleformutils.useItemProps)(props);console.log("Item====>",rest);return _react.default.createElement("div",null,_react.default.createElement("div",null,_react.default.createElement("span",null,label)," ",content," "),_react.default.createElement(FormItemError,{rules:rules}))};const FormList=props=>{const{className,style}=props;const children=(0,_simpleformutils.useListProps)(props);return _react.default.createElement("div",{style:style},children)};const Demo=()=>{const[form]=(0,_simpleformutils.useForm)();const onClick=()=>{console.log("打印实例===>",form)};const onFinish=(...value)=>{console.log("提交打印===>",value)};return _react.default.createElement(Form,{onFinish:onFinish,form:form,initialValues:{点对点1:"1"}},_react.default.createElement(Item,{rules:[{required:true,message:"必填项"}],labelMode:"left",label:"成都洒出1",required:true,name:"点对点1"},_react.default.createElement("input",null)),_react.default.createElement(Item,{rules:[{required:true,message:"必填项"}],labelMode:"left",label:"成都洒出2",required:true,name:"点对点2"},_react.default.createElement("input",null)),_react.default.createElement(FormList,{name:"aaa"},({fields,onAdd,onDelete})=>{return _react.default.createElement("div",{style:{border:"1px solid red",padding:5,boxSizing:"border-box"}},fields.map(item=>{return _react.default.createElement("div",{style:{border:"1px solid green",marginBottom:5,padding:5,boxSizing:"border-box"},key:item.key},_react.default.createElement("button",{type:"button",onClick:()=>onDelete(item.name)},"删除"),_react.default.createElement(Item,{label:`标题${item.key}`,name:[item.name,"a"]},_react.default.createElement("input",{style:{width:"100%",boxSizing:"border-box"}})))}),_react.default.createElement("br",null),_react.default.createElement("button",{type:"button",onClick:()=>onAdd({})},"添加"))}),_react.default.createElement("button",{type:"submit"},"提交"))};const BaseCode_Export__default__value=Demo;\nreturn BaseCode_Export__default__value;\n',language:"tsx",value:'import React ,{ Fragment } from "react"\nimport { \n  FormProps, useFormProps, \n  FormItemProps, useForm ,\n  useItemProps, useItemErrors,\n  FormItemErrorProps,\n  useListProps, FormListProps\n} from "@carefrees/simple-form-utils"\n\nconst Form = (props: FormProps) => {\n  const { content, children, onSubmit,...rest } = useFormProps(props)\n console.log("Form====>",rest)\n\n  return content(\n    <form onSubmit={onSubmit} >\n      {children}\n    </form>\n  )\n}\n\nconst FormItemError = (props: FormItemErrorProps) => {\n  const error = useItemErrors(props)\n  console.log("错误信息====>",error)\n  return (Array.isArray(error) && !!error.length && <div  style={{ color: "red", boxSizing: "border-box" }} >{error}</div> || <Fragment />)\n}\n\nconst Item = (props:FormItemProps)=>{\n const { content , rules ,label , ...rest} = useItemProps(props)\n console.log("Item====>",rest)\n  /**简单化*/\n  return (<div>\n    <div><span>{label}</span> {content} </div>\n    <FormItemError rules={rules} />\n  </div>)\n}\n\nexport const FormList = (props: FormListProps) => {\n  const { className, style } = props\n  const children = useListProps(props)\n  return (\n    <div style={style} >\n      {children}\n    </div>\n  )\n}\n\nconst Demo = ()=>{\n  const [form] = useForm()\n\n  const onClick = ()=>{\n    console.log("打印实例===>",form)\n  } \n\n  const onFinish = (...value)=>{\n    console.log("提交打印===>",value)\n  }\n\n  return (<Form onFinish={onFinish} form={form} initialValues={{ 点对点1:"1"  }}  >\n    <Item rules={[{ required: true, message: "必填项" }]} labelMode="left" label="成都洒出1" required name="点对点1">\n      <input  />\n    </Item>\n    <Item rules={[{ required: true, message: "必填项" }]} labelMode="left" label="成都洒出2" required name="点对点2">\n      <input  />\n    </Item>\n     <FormList name="aaa">\n        {({ fields, onAdd, onDelete }) => {\n          return <div style={{ border: "1px solid red", padding: 5, boxSizing: "border-box" }} >\n            {fields.map((item) => {\n              return <div style={{ border: "1px solid green", marginBottom: 5, padding: 5, boxSizing: "border-box" }} key={item.key}>\n                <button type="button" onClick={() => onDelete(item.name)} >删除</button>\n                <Item label={`标题${item.key}`} name={[item.name, "a"]} ><input style={{ width: "100%", boxSizing: "border-box" }} /></Item>\n              </div>\n            })}\n            <br />\n            <button type="button" onClick={() => onAdd({})} >添加</button>\n          </div>\n        }}\n      </FormList>\n    <button type="submit" >提交</button>\n  </Form>)\n}\n\nexport default Demo;\n'}},source:'`react`多平台快速创建表单\n\n## 安装\n\n```bash\n$ npm install @carefrees/simple-form-utils # yarn add @carefrees/simple-form-utils\n```\n\n## API\n\n### hooks\n\n**组件参数处理**\n\n1. `useFormProps`:处理`Form`组件参数\n2. `useIsHide`:处理隐藏表单项组件参数\n3. `useItemErrors`:处理表单项错误信息提示组件参数\n4. `useListProps`:处理表单`List`组件参数\n5. `useItemProps`:处理表单项组件参数\n\n**状态管理**\n\n1. `FormContext`:表单实例方法`Context`\n2. `FormProvider`:表单实例方法`Provider`\n3. `useFormContext`:获取表单实例方法\n4. `useRegister`:注册表单项\n5. `useRegisterWatch`:注册监听值变化\n6. `MultipleFormContext`:多表单实例方法`Context`\n7. `MultipleFormProvider`:多表单实例方法`Provider`\n8. `useMultipleFormContext`:获取多表单实例方法\n9. `CommonAttributesContext`:公共参数`Context`\n10. `CommonAttributesProvider`:公共参数`Provider`\n11. `useCommonAttributesContext`:获取公共参数\n12. `FormListContext`:表单`List`实例方法`Context`\n13. `FormListProvider`:表单`List`实例方法`Provider`\n14. `useFormListContext`:获取表单`List`实例方法\n15. `useFormListName`:处理表单`List`的`name字段值`\n16. `useForm`:创建表单实例\n17. `useMultipleForm`:创建多表单实例\n\n### 实体类\n\n1. `FormInstance`:表单实例\n2. `Rule`:表单项规则实例\n3. `MultipleFormInstance`:多表单实例\n4. `List`:表单`List`实例\n  \n### 方法\n\n1. `randomString`:随机字符串\n2. `useRandomId`:获取唯一`uid`\n\n## 简单案例\n\n```tsx mdx:preview\nimport React ,{ Fragment } from "react"\nimport { \n  FormProps, useFormProps, \n  FormItemProps, useForm ,\n  useItemProps, useItemErrors,\n  FormItemErrorProps,\n  useListProps, FormListProps\n} from "@carefrees/simple-form-utils"\n\nconst Form = (props: FormProps) => {\n  const { content, children, onSubmit,...rest } = useFormProps(props)\n console.log("Form====>",rest)\n\n  return content(\n    <form onSubmit={onSubmit} >\n      {children}\n    </form>\n  )\n}\n\nconst FormItemError = (props: FormItemErrorProps) => {\n  const error = useItemErrors(props)\n  console.log("错误信息====>",error)\n  return (Array.isArray(error) && !!error.length && <div  style={{ color: "red", boxSizing: "border-box" }} >{error}</div> || <Fragment />)\n}\n\nconst Item = (props:FormItemProps)=>{\n const { content , rules ,label , ...rest} = useItemProps(props)\n console.log("Item====>",rest)\n  /**简单化*/\n  return (<div>\n    <div><span>{label}</span> {content} </div>\n    <FormItemError rules={rules} />\n  </div>)\n}\n\nexport const FormList = (props: FormListProps) => {\n  const { className, style } = props\n  const children = useListProps(props)\n  return (\n    <div style={style} >\n      {children}\n    </div>\n  )\n}\n\nconst Demo = ()=>{\n  const [form] = useForm()\n\n  const onClick = ()=>{\n    console.log("打印实例===>",form)\n  } \n\n  const onFinish = (...value)=>{\n    console.log("提交打印===>",value)\n  }\n\n  return (<Form onFinish={onFinish} form={form} initialValues={{ 点对点1:"1"  }}  >\n    <Item rules={[{ required: true, message: "必填项" }]} labelMode="left" label="成都洒出1" required name="点对点1">\n      <input  />\n    </Item>\n    <Item rules={[{ required: true, message: "必填项" }]} labelMode="left" label="成都洒出2" required name="点对点2">\n      <input  />\n    </Item>\n     <FormList name="aaa">\n        {({ fields, onAdd, onDelete }) => {\n          return <div style={{ border: "1px solid red", padding: 5, boxSizing: "border-box" }} >\n            {fields.map((item) => {\n              return <div style={{ border: "1px solid green", marginBottom: 5, padding: 5, boxSizing: "border-box" }} key={item.key}>\n                <button type="button" onClick={() => onDelete(item.name)} >删除</button>\n                <Item label={`标题${item.key}`} name={[item.name, "a"]} ><input style={{ width: "100%", boxSizing: "border-box" }} /></Item>\n              </div>\n            })}\n            <br />\n            <button type="button" onClick={() => onAdd({})} >添加</button>\n          </div>\n        }}\n      </FormList>\n    <button type="submit" >提交</button>\n  </Form>)\n}\n\nexport default Demo;\n\n```\n\n## 类型\n\n**interface文件夹内类型**\n\n```ts\n// interface/form.ts\n\nimport { InstanceFunction, ValidateErrorEntity, LabelMode } from "./"\n\nexport interface InitialHideValuesType {\n  [s: string]: boolean | InitialHideValuesType\n}\n\nexport interface FormProps<Values = any> {\n  /**\n   * label 显示位置\n   * @default "left"\n  */\n  labelMode?: LabelMode\n  /**表单实例*/\n  form?: InstanceFunction\n  /**表单名称*/\n  name?: string\n  /**保存提交完成*/\n  onFinish?: (values: Values) => void;\n  /**保存提交失败*/\n  onFinishFailed?: (value: ValidateErrorEntity) => void\n  /**值变化触发事件*/\n  onValuesChange?: (changedValues: any, values: Values) => void;\n  /**\n    * 表单项列数\n    * @default 4\n   */\n  columnNumber?: number;\n  /**初始值*/\n  initialValues?: Values\n  /**隐藏组件初始值**/\n  initialHideValues?: InitialHideValuesType\n  /**内容*/\n  children?: React.ReactNode\n  /**class name */\n  className?: string\n  /**样式*/\n  style?: React.CSSProperties\n}\n\n```\n\n```ts\n// interface/formItem.ts\nimport { ReactNode } from "react"\nimport type { CSTU_PathTypes } from "@carefrees/simple-store-utils"\nimport { RuleItem } from "async-validator"\nimport { InstanceFunction, } from "./store"\nimport type { List } from "../useStore"\n\nexport type LabelMode = \'hidden\' | \'left\' | \'top\';\n\nexport interface FormItemProps {\n  /**\n  * 存储字段\n  * @description 数组形式的会转换为使用 \'_\' 连接的字符串\n */\n  name: CSTU_PathTypes\n  /**规则*/\n  rules?: RuleItem[]\n  /**\n   * label 标签内容\n  */\n  label?: React.ReactNode\n  /**\n   * label 显示位置\n   * @default "left"\n  */\n  labelMode?: LabelMode\n  /**\n   * 内容\n  */\n  children?: React.ReactNode\n  /**\n   * 设置收集字段值变更的时机\n   * @default "onChange" \n  */\n  trigger?: string\n  /**\n   * 子节点的值的属性\n   * \n   * @default "value"\n  */\n  valuePropName?: string\n  /**\n   * 必填样式设置\n  */\n  required?: boolean\n  /**\n   * 为 true 时不带样式,作为纯字段控件使用\n  */\n  noStyle?: boolean\n  /**\n   * 设置如何将 event 的值转换成字段值	\n  */\n  getValueFromEvent?: (event: any) => any\n  /**\n   * 为子元素添加额外的属性	\n  */\n  getAttrProps?: (value: any, instance: InstanceFunction) => any\n  /**\n   * 是否自己动态控制规则数据\n   * @default "false"\n   */\n  isDynamicsRules?: boolean;\n\n  /**样式*/\n  style?: React.CSSProperties\n  /**class name值*/\n  className?: string\n\n  symbolId?: string\n}\n\nexport interface FormListChildrenProps {\n  /**数据集合*/\n  fields: { name: number, key: number }[],\n  /**添加*/\n  onAdd: (initialValue?: Object) => void\n  /**删除*/\n  onDelete: (index: number | number[]) => void\n}\n\nexport interface FormListProps {\n  /**字段*/\n  name: CSTU_PathTypes\n  /**内容*/\n  children?: (props: FormListChildrenProps, list: List) => ReactNode\n  /**样式*/\n  style?: React.CSSProperties\n  /**class name值*/\n  className?: string\n  symbolId?: string\n}\n\n```\n\n```ts\n// interface/store.ts\nimport type { CSTU_RegisterProps, CSTU_RegisterWatchProps, CSTU_PathTypes } from "@carefrees/simple-store-utils"\nimport { InitialHideValuesType } from "./form"\nimport type { Rule } from "../useStore/rule"\nimport { RuleItem } from "async-validator"\n\nexport interface FormItemRegisterProps extends CSTU_RegisterProps {\n\n}\n\nexport interface FormRegisterWatchProps extends CSTU_RegisterWatchProps {\n\n}\n\nexport interface FormItemRegisterHideProps extends CSTU_RegisterProps {\n\n}\n\nexport interface FromItemErrorListType {\n  /**错误信息*/\n  errors: string[];\n  /**字段*/\n  name: CSTU_PathTypes;\n}\n\nexport interface Callbacks<Values = any> {\n  /**值更新触发*/\n  onValuesChange?: (changedValues: any, values: Values) => void;\n  /**提交保存 验证成功*/\n  onFinish?: (values: Values) => void;\n  /**提交保存 验证失败*/\n  onFinishFailed?: (errorInfo: ValidateErrorEntity<Values>) => void;\n}\n\nexport interface ValidateErrorEntity<Values = any> {\n  values: Values;\n  errorFields: { name: CSTU_PathTypes; errors: string[] }[];\n}\n\nexport interface InstanceFunction {\n  /**\n   * 设置初始值\n   * @param initialValues 初始值\n  */\n  init: (initialValue?: Partial<any>, initialHideValues?: InitialHideValuesType) => void;\n  /**\n  * 注册 form item \n  * @param props 注册更新组件方法\n  * */\n  register: (props: FormItemRegisterProps) => () => void;\n\n  /**\n   * 注册值更新监听\n   * @param props 监听方法\n  */\n  registerWatch: (props: FormRegisterWatchProps) => () => void;\n  /**\n  * 注册 form item 验证规则\n  * @param validator 参数\n  * */\n  registerValidator: (validator: Rule) => () => void\n  /**\n  * 注册 form hide item 隐藏组件\n  * @param props 参数\n  * */\n  registerHide: (props: FormItemRegisterHideProps) => () => void\n  /**\n   * 更新数据方法\n   * @param path 更新字段路径\n   * @param value 更新值\n  */\n  updateValue: (path: CSTU_PathTypes, value: any) => void;\n  /**\n * 批量更新数据方法\n * @param value 更新数据对象\n * @param notice 通知对应的组件更新\n*/\n  bathUpdateValue: (value: Record<string | number, unknown>, notice: boolean | string[]) => void;\n  /**\n   * 通知组件更新（当不传递值的时候，更新所有组件）\n   * @param paths — 更新组件路径集合\n  */\n  notice: (paths?: string[] | boolean) => void;\n  /**\n   * 获取字段值\n   * @param path 获取值路径\n  */\n  getValue: (path?: CSTU_PathTypes) => any;\n  /**\n   * 验证表单规则\n   * @param paths 字段路径(如果不传递字段路径,则验证所有)\n  */\n  validate: () => Promise<ValidateErrorEntity | any>\n  /**\n   * 提交\n  */\n  submit: () => Promise<void>\n  /**\n   * 设置回调函数\n  */\n  setCallbacks: (callbacks: Callbacks<any>) => void\n  /**\n   * 更新隐藏组件数据方法\n   * @param path 更新字段路径\n   * @param value 更新值\n  */\n  updateHideValue: (path: CSTU_PathTypes, value: any) => void\n  /**\n   * 获取隐藏组件字段值\n   * @param path 获取值路径\n  */\n  getHideValue: (path?: CSTU_PathTypes) => any\n\n  /**\n   * 更新表单项规则\n   * @param path 字段\n   * @param rules 规则\n   * @param message 提示信息\n   * \n  */\n  updateValidatorRules: (path: CSTU_PathTypes, rules: RuleItem[], message?: string[]) => void\n  /**\n  * 更新表单项提示信息\n  * @param path 字段\n  * @param message 提示信息\n  * \n  */\n  updateValidatorMessage: (path: CSTU_PathTypes, message?: string[]) => void\n\n  /**返回状态数据*/\n  __stateData: {\n    /**操作数据存储 */\n    store: Partial<any>;\n    /**初始值存储 */\n    initialValues: Partial<any>;\n    /**挂载组件存储 */\n    componentList: FormItemRegisterProps[];\n    /**挂载监听组件存储 */\n    watchList: FormRegisterWatchProps[];\n    /**验证规则集合 */\n    validatorList: Rule[];\n    /**隐藏组件集合 */\n    hideList: FormItemRegisterHideProps[];\n    /**隐藏组件字段对应的值段*/\n    hideStore: Object;\n    /**隐藏组件字段对应的初始值 */\n    hideInitialValues: Object;\n  }\n}\n```\n\n```ts\n// interface/commonAttributes.ts\n\nimport { LabelMode } from "./formItem"\n\nexport interface CommonAttributesProps {\n  /**\n   * label 显示位置\n   * @default "left"\n  */\n  labelMode?: LabelMode\n  /**\n   * 表单项列数\n   * @default 4\n  */\n  columnNumber?: number;\n}\n```\n\n**useStore文件夹内类型**\n\n```ts\n// useStore/list.ts\nimport type { CSTU_PathTypes } from "@carefrees/simple-store-utils";\nimport { InstanceFunction } from "./../interface";\nexport declare class List {\n    instance?: InstanceFunction;\n    /**记录key值*/\n    keys: number[];\n    /**累加数据，唯一性*/\n    id: number;\n    name?: CSTU_PathTypes;\n    /**\n     * 初始化\n     * @param name 字段\n     * @param instance 表单实例\n    */\n    init: (name: CSTU_PathTypes, instance: InstanceFunction) => void;\n    /**获取值*/\n    getLastValue: () => any[];\n    /**\n     * 添加一条\n     * @param initialValue 初始值\n    */\n    onAdd: (initialValue?: Object) => void;\n    /**\n     * 删除\n     * @param index 删除数据下标\n    */\n    onDelete: (index: number | number[]) => void;\n    /**获取渲染 list 字段拼接*/\n    getFields: () => {\n        name: number;\n        key: number;\n    }[];\n}\n\n\n```\n\n```ts\n// useStore/multiple.ts\nimport type { InstanceFunction, ValidateErrorEntity } from "../interface";\nimport type { CSTU_PathTypes } from "@carefrees/simple-store-utils";\nexport declare class MultipleFormInstance {\n    private instanceMap;\n    /**\n     * 注册表单实例\n     * @param name 表单名称\n     * @param form 表单实例\n    */\n    register: (name: string, form: InstanceFunction) => () => void;\n    /**\n     * 获取表单实例\n     * @param name 表单名称\n    */\n    getFormInstances: (name?: string) => InstanceFunction | Map<string, InstanceFunction>;\n    /**\n     * 验证表单规则\n     * @param name 表单名称(如果不传递表单名称,则验证所有表单)\n    */\n    validate: (name?: string) => Promise<Record<string, ValidateErrorEntity<any>>>;\n    /**\n     * 获取表单中值\n     * @param name 表单名称 (不存在时，获取所有表单值)\n     * @param path 字段路径 (不存在的时候直接获取对应表单所有值)\n     *\n    */\n    getValues: (name?: string, path?: CSTU_PathTypes) => {};\n}\nexport declare function useMultipleForm(instance?: MultipleFormInstance): MultipleFormInstance[];\n\n```\n\n```ts\n// useStore/rule.ts\nimport type { RuleItem } from "async-validator";\nimport type { CSTU_PathTypes } from "@carefrees/simple-store-utils";\nimport { InstanceFunction } from "./../interface";\nexport declare class Rule {\n    /**表单实例*/\n    instance?: InstanceFunction;\n    /**字段*/\n    name?: CSTU_PathTypes;\n    /**规则*/\n    rules: RuleItem[];\n    /**验证规则错误提示信息*/\n    messages?: string[];\n    /**更新规则的时候，更新表单项(需要进行赋值)*/\n    updateFormItem?: Function;\n    /**更新提示信息时，更新提示信息组件(需要进行赋值)*/\n    updateFormItemError?: Function;\n    constructor(props: {\n        name: CSTU_PathTypes;\n        rules: RuleItem[];\n        instance: InstanceFunction;\n    });\n    /**更新提示信息*/\n    updateMessages: (message?: string[]) => void;\n    /**更新规则(更新规则时，默认把提示信息置空)*/\n    updateRules: (rules: RuleItem[], message?: string[]) => void;\n    /**验证规则*/\n    validator: () => Promise<unknown>;\n}\n\n```\n\n```ts\n// useStore/store.ts\nimport { CSTU_Instance } from "@carefrees/simple-store-utils";\nimport type { CSTU_PathTypes } from "@carefrees/simple-store-utils";\nimport type { Rule } from "./rule";\nimport type { FormItemRegisterProps, FormRegisterWatchProps, InstanceFunction, Callbacks, FormItemRegisterHideProps, InitialHideValuesType } from "../interface";\nimport { RuleItem } from "async-validator";\nexport declare class FormInstance<T = any> extends CSTU_Instance {\n    private storeField;\n    private initialField;\n    private componentField;\n    private watchField;\n    private store;\n    private initialValues;\n    private componentList;\n    private watchList;\n    /**验证规则集合*/\n    private validatorList;\n    /**隐藏组件集合*/\n    private hideList;\n    /**隐藏组件字段对应的值*/\n    private hideStore;\n    /**隐藏组件字段对应的初始值*/\n    private hideInitialValues;\n    private hideStoreField;\n    private hideInitialField;\n    private hideComponentField;\n    /** 回调函数 */\n    private callbacks;\n    /**\n     * 设置初始值\n     * @param initialValues 初始值\n    */\n    private init;\n    /**\n     * 注册 form item\n     * @param props 注册更新组件方法\n     * */\n    private register;\n    /**\n     * 注册值更新监听\n     * @param props 监听方法\n    */\n    private registerWatch;\n    /**\n     * 注册 form item 验证规则\n     * @param validator 参数\n     * */\n    private registerValidator;\n    /**\n     * 更新表单项规则\n     * @param path 字段\n     * @param rules 规则\n     * @param message 提示信息\n     *\n    */\n    private updateValidatorRules;\n    /**\n    * 更新表单项提示信息\n    * @param path 字段\n    * @param message 提示信息\n    *\n    */\n    private updateValidatorMessage;\n    /**\n   * 注册 form hide item 隐藏组件\n   * @param props 参数\n   * */\n    private registerHide;\n    /**\n     * 更新隐藏组件数据方法\n     * @param path 更新字段路径\n     * @param value 更新值\n    */\n    private updateHideValue;\n    /**\n     * 获取隐藏组件字段值\n     * @param path 获取值路径\n    */\n    private getHideValue;\n    /**\n     * 更新数据方法\n     * @param path 更新字段路径\n     * @param value 更新值\n    */\n    private updateValue;\n    /**\n     * 批量更新数据方法\n     * @param value 更新数据对象\n     * @param notice 通知对应的组件更新\n    */\n    private bathUpdateValue;\n    /**\n     * 通知组件更新（当不传递值的时候，更新所有组件）\n     * @param paths — 更新组件路径集合\n    */\n    private notice;\n    /**\n     * 获取字段值\n     * @param path 获取值路径\n    */\n    private getValue;\n    private validateOne;\n    /**\n     * 验证表单规则\n     * @param paths 字段路径(如果不传递字段路径,则验证所有)\n    */\n    private validate;\n    /**\n     * 提交\n    */\n    private submit;\n    /**\n     * 设置回调函数\n    */\n    private setCallbacks;\n    /**返回状态数据*/\n    private getStateData;\n    /**暴露实例方法*/\n    get instance_function(): {\n        init: (initialValues?: Partial<T>, initialHideValues?: InitialHideValuesType) => void;\n        register: (props: FormItemRegisterProps) => () => void;\n        registerWatch: (props: FormRegisterWatchProps) => () => void;\n        updateValue: (path: CSTU_PathTypes, value: any) => void;\n        bathUpdateValue: (value: Record<string | number, unknown>, notice: boolean | string[]) => void;\n        notice: (paths?: boolean | string[]) => void;\n        getValue: (path?: CSTU_PathTypes) => any;\n        validate: (paths?: CSTU_PathTypes[]) => Promise<Object>;\n        submit: () => Promise<void>;\n        setCallbacks: (callbacks: Callbacks<any>) => void;\n        registerValidator: (validator: Rule) => () => void;\n        registerHide: (props: FormItemRegisterHideProps) => () => void;\n        updateHideValue: (path: CSTU_PathTypes, value: any) => void;\n        getHideValue: (path?: CSTU_PathTypes) => any;\n        updateValidatorRules: (path: CSTU_PathTypes, rules: RuleItem[], message?: string[]) => void;\n        updateValidatorMessage: (path: CSTU_PathTypes, message?: string[]) => void;\n        __stateData: {\n            store: Partial<T>;\n            initialValues: Partial<T>;\n            componentList: FormItemRegisterProps[];\n            watchList: FormRegisterWatchProps[];\n            validatorList: Rule[];\n            hideList: FormItemRegisterHideProps[];\n            hideStore: {};\n            hideInitialValues: {};\n        };\n    };\n}\nexport declare function useForm(instance?: InstanceFunction): InstanceFunction[];\n\n\n```\n\n**hooks或者方法类型**\n\n```ts\nimport { ReactNode } from "react";\nimport { FormListProps,FormItemProps,FormProps ,InstanceFunction, CommonAttributesProps} from "../interface";\nimport { Rule } from "../useStore/rule";\nimport { CSTU_PathTypes } from "@carefrees/simple-store-utils";\nimport { MultipleFormInstance } from "../useStore";\n\nexport declare const FormContext: import("react").Context<InstanceFunction>;\nexport declare const FormProvider: (props: import("@carefrees/simple-store-utils").CSTU_InstanceProviderProps<InstanceFunction, any>) => import("react").FunctionComponentElement<import("react").ProviderProps<InstanceFunction>>;\nexport declare const useFormContext: () => InstanceFunction;\nexport declare const useRegister: (props: import("@carefrees/simple-store-utils").Use_CSTU_InstanceItemRegisterProps) => InstanceFunction;\nexport declare const useRegisterWatch: (instance: import("@carefrees/simple-store-utils").CSTU_Instance, path: CSTU_PathTypes, fun?: (value: any) => void) => any;\nexport declare const MultipleFormContext: import("react").Context<MultipleFormInstance>;\nexport declare const MultipleFormProvider: (props: import("@carefrees/simple-store-utils").CSTU_InstanceProviderProps<MultipleFormInstance, any>) => import("react").FunctionComponentElement<import("react").ProviderProps<MultipleFormInstance>>;\nexport declare const useMultipleFormContext: () => MultipleFormInstance;\nexport declare const CommonAttributesContext: import("react").Context<CommonAttributesProps>;\nexport declare const CommonAttributesProvider: (props: {\n    children: ReactNode;\n    value: CommonAttributesProps;\n}) => import("react").FunctionComponentElement<import("react").ProviderProps<CommonAttributesProps>>;\nexport declare const useCommonAttributesContext: () => CommonAttributesProps;\nexport declare const FormListContext: import("react").Context<{\n    name: CSTU_PathTypes;\n}>;\nexport declare const FormListProvider: (props: {\n    children: ReactNode;\n    value: {\n        name: CSTU_PathTypes;\n    };\n}) => import("react").FunctionComponentElement<import("react").ProviderProps<{\n    name: CSTU_PathTypes;\n}>>;\nexport declare const useFormListContext: () => {\n    name: CSTU_PathTypes;\n};\n/**\n * 获取 List 组件包裹内容的 拼接字段\n * @param name 当前字段值\n*/\nexport declare const useFormListName: (name?: CSTU_PathTypes) => [CSTU_PathTypes, string];\n\nexport declare const useFormProps: (props: FormProps) => {\n    onSubmit: import("react").FormEventHandler<HTMLFormElement>;\n    columnNumber: number;\n    children: import("react").ReactNode;\n    labelMode: import("../interface").LabelMode;\n    className: string;\n    style: import("react").CSSProperties;\n    formInstance: import("../interface").InstanceFunction;\n    multipleForm: import("../useStore").MultipleFormInstance;\n    content: (child?: React.ReactNode) => import("react").FunctionComponentElement<import("@carefrees/simple-store-utils").CSTU_InstanceProviderProps<import("../interface").InstanceFunction, any>>;\n    form?: import("../interface").InstanceFunction;\n    name?: string;\n    onFinish?: (values: any) => void;\n    onFinishFailed?: (value: import("../interface").ValidateErrorEntity<any>) => void;\n    onValuesChange?: (changedValues: any, values: any) => void;\n    initialValues?: any;\n    initialHideValues?: import("../interface").InitialHideValuesType;\n};\n\n/**处理list表单*/\nexport declare const useListProps: (props: FormListProps) => import("react").FunctionComponentElement<{\n    children: import("react").ReactNode;\n    value: {\n        name: import("@carefrees/simple-store-utils").CSTU_PathTypes;\n    };\n}>;\n\n/**表单项处理参数*/\nexport declare const useItemProps: (props: FormItemProps) => {\n    uid: string;\n    content: import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>>[];\n    rules: import("react").MutableRefObject<Rule>;\n    required: boolean;\n    label: import("react").ReactNode;\n    labelMode: import("../interface").LabelMode;\n    style: import("react").CSSProperties;\n    className: string;\n    noStyle: boolean;\n};\n\nexport interface FormItemErrorProps {\n    rules: React.MutableRefObject<Rule>;\n}\n/**错误信息*/\nexport declare const useItemErrors: (props: FormItemErrorProps) => string[];\n/**是否隐藏表单项*/\nexport declare const useIsHide: (name: CSTU_PathTypes) => any;\n\nexport declare function randomString(uId: string, field?: string, length?: number): string;\n\nexport declare const useRandomId: (name: string, pre?: string) => string;\n\n```\n',headings:[],headingsList:[]}}}]);